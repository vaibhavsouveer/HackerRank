/* Problem Statement == You are given n activities with their start and finish times.
Select the maximum number of activities that can be performed by a single person, assuming that a person can
only work on a single activity at a time.*/

/*The greedy choice is to always pick the next activity whose finish time is least among the remaining activities
and the start time is more than or equal to the finish time of previously selected activity. We can sort the
activities according to their finishing time so that we always consider the next activity as minimum finishing time activity
1) Sort the activities according to their finishing time
2) Select the first activity from the sorted array and print it.
3) Do following for remaining activities in the sorted array.
  a) If the start time of this activity is greater than or equal to the finish time of previously selected activity then
  select this activity and print it.*/
  
  
  //CODE
  
  package runner;
import java.util.*;

public class Runner {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		List<Activity> col = new ArrayList<Activity>();
		col.add(new Activity(1, 2));
		col.add(new Activity(3, 4));
		col.add(new Activity(0, 6));
		col.add(new Activity(5, 7));
		col.add(new Activity(8, 9));
		col.add(new Activity(5, 9));
		Collections.sort(col);
		System.out.println(col);
		
		int flag = -1, temp = 0;
		
		for(Activity a : col) {
			if(flag == -1) {
				a.setFlag(1);
				temp = a.getFinish();
				flag = 1;
				//System.out.println(a);
			}
			else {
				if(a.getStart() >= temp) {
					a.setFlag(1);
					temp = a.getFinish();
				}
			}
		}
		
		for(Activity a : col)
			if (a.getFlag() != -1)
				System.out.println(a.getFinish());
		

	}

}
